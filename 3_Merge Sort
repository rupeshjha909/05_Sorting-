
void merge(std::vector<int> &a, int s, int e)
{
	int mid = (s + e) / 2;
	int i = s;
	int j = mid + 1;
	int k = s;
	int temp[100];
	while (i <= mid and j <= e)
	{
		if (a[i] <= a[j])
			temp[k++] = a[i++];
		else
			temp[k++] = a[j++];
	}
	while (i <= mid)
		temp[k++] = a[i++];
	while (j <= e)
		temp[k++] = a[j++];
	for (int i = s; i <= e; i++)
	{
		a[i] = temp[i];
	}
}

void mergeSort(std::vector<int> &a, int s, int e)
{
	if (s >= e)
		return;

	int mid = (s + e) / 2;
	mergeSort(a, s, mid);
	mergeSort(a, mid + 1, e);
	merge(a, s, e);
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int t;
	cin >> t;
	while (t--)
	{
		int n;
		cin >> n;
		std::vector<int> v(n);
		for (int i = 0; i < n; i++)
			cin >> v[i];
		mergeSort(v, 0, n - 1);
		for (auto x : v)
			cout << x << " ";
	}
}
